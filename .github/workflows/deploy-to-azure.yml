# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

# name: Deploy ASP.NET Core web api to Azure

# on: [push]

# env:
#   AZURE_WEBAPP_NAME: PokemonReview # set this to your application's name
#   AZURE_WEBAPP_PACKAGE_PATH: "./publised" # set this to the path to your web app project, defaults to the repository root
#   DOTNET_VERSION: "6" # set this to the dot net version to use
#   AZURE_WEBAPP_PUBLISH_PROFILE: <publishData><publishProfile profileName="PokemonReview - Web Deploy" publishMethod="MSDeploy" publishUrl="pokemonreview.scm.azurewebsites.net:443" msdeploySite="PokemonReview" userName="$PokemonReview" userPWD="vCqtKcpxqLa95NfmQkFChTGNirsmB1E0MBaWWRBqdcs99JsTwf39FwwrZJqE" destinationAppUrl="https://pokemonreview.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="http://windows.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="PokemonReview - FTP" publishMethod="FTP" publishUrl="ftps://waws-prod-blu-397.ftp.azurewebsites.windows.net/site/wwwroot" ftpPassiveMode="True" userName="PokemonReview\$PokemonReview" userPWD="vCqtKcpxqLa95NfmQkFChTGNirsmB1E0MBaWWRBqdcs99JsTwf39FwwrZJqE" destinationAppUrl="https://pokemonreview.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="http://windows.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="PokemonReview - Zip Deploy" publishMethod="ZipDeploy" publishUrl="pokemonreview.scm.azurewebsites.net:443" userName="$PokemonReview" userPWD="vCqtKcpxqLa95NfmQkFChTGNirsmB1E0MBaWWRBqdcs99JsTwf39FwwrZJqE" destinationAppUrl="https://pokemonreview.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="http://windows.azure.com" webSystem="WebSites"><databases /></publishProfile></publishData>

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the repo
#       - uses: actions/checkout@main

#       # Setup .NET Core SDK
#       - name: Setup .NET Core
#         uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}

#       # Run dotnet build and publish
#       - name: dotnet build and publish
#         run: |
#           dotnet restore
#           dotnet build --configuration Release
#           dotnet publish

#       # Deploy to Azure Web apps
#       - name: "Run Azure webapp deploy action using publish profile credentials"
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ env.AZURE_WEBAPP_NAME }} # Replace with your app name
#           publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE  }} # Define secret variable in repository settings as per action documentation
#           package: "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and deploy ASP.Net Core app to an Azure Web App

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "The reason for running the workflow"
        required: true
        default: "Manual build from GitHub UI"
  push:
    branches: [main]

env:
  app-name: "PokemonReview"
  rg-name: "pokemonreview"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: "Print manual run reason"
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo 'Reason: ${{ github.event.inputs.reason }}'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
      - name: Publish
        run: dotnet publish pokemon-review.csproj -c Release -o website
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: website
          path: website
          if-no-files-found: error

  deploy_staging:
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: STAGING
      url: ${{ steps.deploywebapp.outputs.webapp-url }}

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: website
          path: website

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy web app
        id: deploywebapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.app-name }}
          # slot-name: staging
          package: website

      # - name: Update config
      #   uses: Azure/appservice-settings@v1
      #   with:
      #     app-name: ${{ env.app-name }}
      #     slot-name: staging
      #     app-settings-json: |
      #       [
      #           {
      #               "name": "UI:Index:Header",
      #               "value": "${{ secrets.INDEX_HEADER }}",
      #               "slotSetting": true
      #           }
      #       ]

      - name: az cli logout
        run: az logout
